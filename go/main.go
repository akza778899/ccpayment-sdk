package main

import (
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
)

func main() {
	router := gin.Default()

	router.POST("/create/order", CreateOrder)         // 创建订单方法
	router.POST("/webhook/verify", DemoPayNotifyBack) // webhook 验证例子

	s := &http.Server{
		Addr:           ":8089",
		Handler:        router,
		ReadTimeout:    10 * time.Second,
		WriteTimeout:   10 * time.Second,
		MaxHeaderBytes: 1 << 20,
	}
	s.ListenAndServe()
}

var TestCreateOrderUrl = "https://admin.ccpayment.com/ccpayment/v1/pay/CreateTokenTradeOrder"

// 创建订单方法
func CreateOrder(ctx *gin.Context) {
	bill := BillId()
	jsonContent := &JsonContent{
		TokenId:    "e8f64d3d-df5b-411d-897f-c6d8d30206b7",       // from ccpayment support token list
		Chain:      "BSC",                                        // according to user selected
		Amount:     "1",                                          // pay amount
		Contract:   "0x2170ed0880ac9a755fd29b2688956bd959f933f8", //selected token contract
		OutOrderNo: bill,                                         //merchant order id
		FiatName:   "USD",                                        //fiat name just support usd currently
	}
	//content, _ := json.Marshal(jsonContent)
	//timestamps := int64(1672261484)
	//times := strconv.Itoa(int(timestamps))
	//randStr := util.RandStr(5)
	//serviceStr := "ccpayment_id=" + mchid + "&app_id=" + arr.Appid + "&json_content=" + string(content) + "&timestamp=" + times + "&noncestr=" + randStr
	// todo 1. 拼接签名字符串,注意字段顺序
	serviceStr := "ccpayment_id=CP10001&app_id=202301170950281615285414881132544&json_content={\"token_id\":\"e8f64d3d-df5b-411d-897f-c6d8d30206b7\",\"chain\":\"BSC\",\"amount\":\"1\",\"contract\":\"0x2170ed0880ac9a755fd29b2688956bd959f933f8\",\"out_order_no\":\"" + bill + "\",\"fiat_name\":\"USD\"}&timestamp=1672299548&noncestr=ylaDo"
	fmt.Println(serviceStr)
	// todo 2. 使用私钥进行加密
	bt, err := RsaSignWithSha256([]byte(serviceStr), []byte(PrivateKey))
	if err != nil {
		fmt.Println("Sign err:", err)
		return
	}
	req := &SubmitCreateTradeOrderRequest{
		CcpaymentId: "CP10001",
		// it can get from merchant center payment settings(web terminal), only support len(APPID) = 33
		Appid:       "202301170950281615285414881132544",
		Timestamp:   1672299548, // current time unix
		JsonContent: jsonContent,
		Sign:        bt,
		// notify url(sync notice merchant change order status) it must be set in the payment settings(web terminal), otherwise program can not work normally
		NotifyUrl: "https://admin.ccpayment.com/merchant/v1/demo/pay/notify",
		Remark:    "",
		//device type only support app currently
		Device: "web",
		//rand str
		Noncestr: "ylaDo", // Random string。util.RandStr(5)
	}
	bytes, _ := json.Marshal(req)
	// todo 3 向ccpayment 发送创建订单请求
	response, err := http.Post(TestCreateOrderUrl, "application/json", strings.NewReader(string(bytes)))
	if err != nil {
		fmt.Println("err:", err.Error())
		return
	}
	if response.StatusCode == http.StatusOK {
		body, _ := ioutil.ReadAll(response.Body)
		obj := AutoGenerated{}
		err = json.Unmarshal(body, &obj)
		if err != nil {
			fmt.Println(err)
			return
		}
	}
}

// webhook 验证例子
func DemoPayNotifyBack(ctx *gin.Context) {

	encryptParam := struct {
		EncryptData []byte
	}{}
	if err := ctx.BindJSON(&encryptParam); err != nil {
		fmt.Printf("1111 %+v\n", err)
		ctx.String(http.StatusOK, "Failed")
		return
	}

	decryptData, err := RsaDecrypt(encryptParam.EncryptData, []byte(PrivateKey))

	if err != nil {
		fmt.Printf("2222 %+v\n", err)
		ctx.String(http.StatusOK, "Failed")
		return
	}

	data := &EncryptData{}
	err = json.Unmarshal(decryptData, data)
	if err != nil {
		fmt.Printf("3333 %+v\n", err)
		ctx.String(http.StatusOK, "Failed")
		return
	}

	fmt.Printf("4444 %+v\n", *data.JsonContent)

	ctx.String(http.StatusOK, "Success")
	return
}
